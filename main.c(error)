
/**
 * @brief Blinky Sample Application main file.
 *
 * This file contains the source code for a sample server application using the LED Button service.
 */

#include <stdint.h>
#include <string.h>
#include "nordic_common.h"
#include "nrf.h"
#include "app_error.h"
#include "ble.h"
#include "ble_err.h"
#include "ble_hci.h"
#include "ble_srv_common.h"
#include "ble_advdata.h"
#include "ble_conn_params.h"
#include "nrf_sdh.h"
#include "nrf_sdh_ble.h"
#include "boards.h"
#include "app_timer.h"
#include "app_button.h"
#include "ble_lbs.h"
#include "nrf_ble_gatt.h"
#include "bsp.h"

#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"
#include "fds.h"
#include "nrf_delay.h"


#define FILE_ID         0x0001  /* The ID of the file to write the records into. */
#define REC_KEY         0x1111  /* A key for the first record. */
#define RECORD_KEY_2    0x2222  /* A key for the second record. */

int s1;
int i=0;
static uint32_t timeout = 0;
static uint32_t timeout2 = 10;
static bool auto_state = 0;
static bool mot1_status = 0;
static int prog_state=0;
APP_TIMER_DEF(m_led_a_timer_id);
APP_TIMER_DEF(m_led_b_timer_id);
int auto_val=0;
int auto_val1=0;
int auto_val2=10;
int auto2=0;

#define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 6

#define APP_FEATURE_NOT_SUPPORTED       BLE_GATT_STATUS_ATTERR_APP_BEGIN + 2    /**< Reply when unsupported features are requested. */

#define ADVERTISING_LED                 BSP_BOARD_LED_0                       /**< Is on when device is advertising. */
#define CONNECTED_LED                   BSP_BOARD_LED_1                       /**< Is on when device has connected. */
#define LEDBUTTON_LED                   BSP_BOARD_LED_2                         /**< LED to be toggled with the help of the LED Button Service. */
#define LEDBUTTON_BUTTON                BUTTON_4                            /**< Button that will trigger the notification event with the LED Button Service */

#define DEVICE_NAME                     "BLE_01"                                /**< Name of device. Will be included in the advertising data. */

#define APP_BLE_OBSERVER_PRIO           3                                       /**< Application's BLE observer priority. You shouldn't need to modify this value. */
#define APP_BLE_CONN_CFG_TAG            1                                       /**< A tag identifying the SoftDevice BLE configuration. */

#define APP_ADV_INTERVAL                64                                      /**< The advertising interval (in units of 0.625 ms; this value corresponds to 40 ms). */
#define APP_ADV_TIMEOUT_IN_SECONDS      BLE_GAP_ADV_TIMEOUT_GENERAL_UNLIMITED   /**< The advertising time-out (in units of seconds). When set to 0, we will never time out. */

#define MIN_CONN_INTERVAL               MSEC_TO_UNITS(100, UNIT_1_25_MS)        /**< Minimum acceptable connection interval (0.5 seconds). */
#define MAX_CONN_INTERVAL               MSEC_TO_UNITS(200, UNIT_1_25_MS)        /**< Maximum acceptable connection interval (1 second). */
#define SLAVE_LATENCY                   0                                       /**< Slave latency. */
#define CONN_SUP_TIMEOUT                MSEC_TO_UNITS(4000, UNIT_10_MS)         /**< Connection supervisory time-out (4 seconds). */

#define FIRST_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(20000)                  /**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (15 seconds). */
#define NEXT_CONN_PARAMS_UPDATE_DELAY   APP_TIMER_TICKS(5000)                   /**< Time between each call to sd_ble_gap_conn_param_update after the first call (5 seconds). */
#define MAX_CONN_PARAMS_UPDATE_COUNT    3                                       /**< Number of attempts before giving up the connection parameter negotiation. */

#define BUTTON_DETECTION_DELAY          APP_TIMER_TICKS(50)                     /**< Delay from a GPIOTE event until a button is reported as pushed (in number of timer ticks). */

#define DEAD_BEEF                       0xDEADBEEF                              /**< Value used as error code on stack dump, can be used to identify stack location on stack unwind. */


BLE_LBS_DEF(m_lbs);                                                             /**< LED Button Service instance. */
NRF_BLE_GATT_DEF(m_gatt);                                                       /**< GATT module instance. */

static uint16_t m_conn_handle = BLE_CONN_HANDLE_INVALID;                        /**< Handle of the current connection. */
uint8_t mdata[5];
int current_f1_status=0;
int f1_max_limit=6;
int f1_min_limit=1;
int a[4],i; 


/**@brief Function for initializing the Advertising functionality.
 *
 * @details Encodes the required advertising data and passes it to the stack.
 *          Also builds a structure to be passed to the stack when starting advertising.
 */
static void advertising_init(void)
{
    ret_code_t    err_code;
    ble_advdata_t advdata;
    ble_advdata_t srdata;

    ble_advdata_manuf_data_t manuf_specific_data;
    
    manuf_specific_data.company_identifier = 0x0000;

    manuf_specific_data.data.p_data = (uint8_t *) mdata;
    manuf_specific_data.data.size   = 0x03;

    ble_uuid_t adv_uuids[] = {{LBS_UUID_SERVICE, m_lbs.uuid_type}};

    // Build and set advertising data
    memset(&advdata, 0, sizeof(advdata));

    advdata.name_type          = BLE_ADVDATA_FULL_NAME;
    advdata.include_appearance = true;
    advdata.flags              = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    advdata.p_manuf_specific_data = &manuf_specific_data;


    memset(&srdata, 0, sizeof(srdata));
    srdata.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
    srdata.uuids_complete.p_uuids  = adv_uuids;

    err_code = ble_advdata_set(&advdata, &srdata);
    APP_ERROR_CHECK(err_code);
}





// =========================== seven segment code ==============================

static void seven_seg(int n)
{   
   // mdata[0]=timeout;
   // advertising_init();
}

// ===========================================================
static void seven_seg2(int n)
{
 mdata[1]=timeout2;
   // advertising_init();
}


//===========================================================Memory Storage using FDS ======================================
// Simple event handler to handle errors during initialization.
static void fds_evt_handler(fds_evt_t const * p_fds_evt)
{
    switch (p_fds_evt->id)
    {
        case FDS_EVT_INIT:
            if (p_fds_evt->result != FDS_SUCCESS)
            {
                // Initialization failed.
            }
            break;
        default:
            break;
    }
}


ret_code_t fds_update(void)
{

		fds_flash_record_t  flash_record;
		fds_record_desc_t   record_desc;
		fds_find_token_t    ftok ={0};//Important, make sure you zero init the ftok token
		uint32_t *data;
		uint32_t err_code;

                uint32_t ret_code_t;

                fds_record_t        record;

                  // Set up record.
                record.file_id           = FILE_ID;
                record.key               = REC_KEY;
                record.data.p_data       = &auto_val;
                record.data.length_words = 1;   /* one word is four bytes. */


		NRF_LOG_INFO("Start searching... \r\n");
		// Loop until all records with the given key and file ID have been found.
		while (fds_record_find(FILE_ID, REC_KEY, &record_desc, &ftok) == FDS_SUCCESS)
		{
				err_code = fds_record_open(&record_desc, &flash_record);
				if ( err_code != FDS_SUCCESS)
				{
					return err_code;		
				}
				
				NRF_LOG_INFO("Found Record ID = %d\r\n",record_desc.record_id);
                                
                                ret_code_t = fds_record_update(&record_desc, &record);
                                if (ret_code_t != FDS_SUCCESS)
                                {
                                    NRF_LOG_INFO("UPDATE FAILED");
                                }
		
				NRF_LOG_INFO("\r\n");
				// Access the record through the flash_record structure.
				// Close the record when done.
				err_code = fds_record_close(&record_desc);
				if (err_code != FDS_SUCCESS)
				{
					return err_code;	
				}
		}
		return NRF_SUCCESS;
		
}


ret_code_t fds_read(void)
{

		fds_flash_record_t  flash_record;
		fds_record_desc_t   record_desc;
		fds_find_token_t    ftok ={0};//Important, make sure you zero init the ftok token
		uint32_t *data;
		uint32_t err_code;
		
		NRF_LOG_INFO("Start searching... \r\n");
		// Loop until all records with the given key and file ID have been found.
		while (fds_record_find(FILE_ID, REC_KEY, &record_desc, &ftok) == FDS_SUCCESS)
		{
				err_code = fds_record_open(&record_desc, &flash_record);
				if ( err_code != FDS_SUCCESS)
				{
					return err_code;		
				}
				
				NRF_LOG_INFO("Found Record ID = %d\r\n",record_desc.record_id);
				data = (uint32_t *) flash_record.p_data;

                                auto_val= data[0];
                                nrf_gpio_pin_set(LED_3);
                               // seven_seg(auto_val);

                                NRF_LOG_INFO("Auta Value - %d\r\n",auto_val);
				for (uint8_t i=0;i<3;i++)
				{
					NRF_LOG_INFO("0x%8x ",data[i]);
                                }                       
                                        
				NRF_LOG_INFO("\r\n");
				// Access the record through the flash_record structure.
				// Close the record when done.
				err_code = fds_record_close(&record_desc);
				if (err_code != FDS_SUCCESS)
				{
					return err_code;	
				}
		}
		return NRF_SUCCESS;
		
}


static ret_code_t fds_test_find_and_delete (void)
{

		fds_record_desc_t   record_desc;
		fds_find_token_t    ftok;
	
		ftok.page=0;
		ftok.p_addr=NULL;
		// Loop and find records with same ID and rec key and mark them as deleted. 
		while (fds_record_find(FILE_ID, REC_KEY, &record_desc, &ftok) == FDS_SUCCESS)
		{
			fds_record_delete(&record_desc);
			NRF_LOG_INFO("Deleted record ID: %d \r\n",record_desc.record_id);
		}
		// call the garbage collector to empty them, don't need to do this all the time, this is just for demonstration
		ret_code_t ret = fds_gc();
		if (ret != FDS_SUCCESS)
		{
				return ret;
		}
		return NRF_SUCCESS;
}


void memory_write()
{

        uint32_t ret_code_t;

        fds_record_t        record;
        fds_record_desc_t   record_desc;

        fds_flash_record_t  flash_record;
        fds_find_token_t    ftok;

        // Set up record.
      record.file_id           = FILE_ID;
      record.key               = REC_KEY;
      record.data.p_data       = &auto_val;
      record.data.length_words = 1;   /* one word is four bytes. */
      ret_code_t = fds_record_write(&record_desc, &record);
      if (ret_code_t != FDS_SUCCESS)
        {
          NRF_LOG_INFO("UPDATE FAILED");
        }
}


// ===============================================================




/**@brief Function for assert macro callback.
 *
 * @details This function will be called in case of an assert in the SoftDevice.
 *
 * @warning This handler is an example only and does not fit a final product. You need to analyze
 *          how your product is supposed to react in case of Assert.
 * @warning On assert from the SoftDevice, the system can only recover on reset.
 *
 * @param[in] line_num    Line number of the failing ASSERT call.
 * @param[in] p_file_name File name of the failing ASSERT call.
 */
void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
{
    app_error_handler(DEAD_BEEF, line_num, p_file_name);
}


/**@brief Function for the LEDs initialization.
 *
 * @details Initializes all LEDs used by the application.
 */
static void leds_init(void)
{
    bsp_board_leds_init();
}


/**@brief Function for the Timer initialization.
 *
 * @details Initializes the timer module.
 */
static void timers_init(void)
{
    // Initialize timer module, making it use the scheduler
    ret_code_t err_code = app_timer_init();
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for the GAP initialization.
 *
 * @details This function sets up all the necessary GAP (Generic Access Profile) parameters of the
 *          device including the device name, appearance, and the preferred connection parameters.
 */
static void gap_params_init(void)
{
    ret_code_t              err_code;
    ble_gap_conn_params_t   gap_conn_params;
    ble_gap_conn_sec_mode_t sec_mode;

    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);

    err_code = sd_ble_gap_device_name_set(&sec_mode,
                                          (const uint8_t *)DEVICE_NAME,
                                          strlen(DEVICE_NAME));
    APP_ERROR_CHECK(err_code);

    memset(&gap_conn_params, 0, sizeof(gap_conn_params));

    gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
    gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
    gap_conn_params.slave_latency     = SLAVE_LATENCY;
    gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;

    err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
    APP_ERROR_CHECK(err_code);
}

/**@brief Function for initializing the GATT module.
 */
static void gatt_init(void)
{
    ret_code_t err_code = nrf_ble_gatt_init(&m_gatt, NULL);
    APP_ERROR_CHECK(err_code);
}



/**@brief Function for handling write events to the LED characteristic.
 *
 * @param[in] p_lbs     Instance of LED Button Service to which the write applies.
 * @param[in] led_state Written/desired state of the LED.
 */
static void led_write_handler(uint16_t conn_handle, ble_lbs_t * p_lbs, uint8_t led_state)
{
  switch (led_state)
   {
     case 0x61:
           timeout2=40;
           auto_val2=timeout2;
           int t2=auto_val2;
          //seven_seg2(t2);
            NRF_LOG_INFO("Data :a ");
        
           nrf_gpio_pin_clear(LED_4);
           nrf_gpio_pin_clear(LED_8);
           nrf_gpio_pin_set(LED_1);
           nrf_gpio_pin_clear(LED_2);
            
       break;


     case 0x62:
           timeout2=30;
           auto_val2=timeout2;
          
          //seven_seg2(t2);
            NRF_LOG_INFO("Data :b");
        
           nrf_gpio_pin_clear(LED_4);
           nrf_gpio_pin_clear(LED_8);
           nrf_gpio_pin_clear(LED_1);
           nrf_gpio_pin_set(LED_2);
       break;

       case 0x63:
           timeout2=20;
           auto_val2=timeout2;
          
          //seven_seg2(t2);
            NRF_LOG_INFO("Data :c");
        
           nrf_gpio_pin_clear(LED_4);
           nrf_gpio_pin_set(LED_8);
           nrf_gpio_pin_clear(LED_1);
           nrf_gpio_pin_clear(LED_2);
       break;

       case 0x64:
           timeout2=10;
           auto_val2=timeout2;
           int t4=auto_val2;
          //seven_seg2(t2);
            NRF_LOG_INFO("Data :d");
        
           nrf_gpio_pin_set(LED_4);
           nrf_gpio_pin_clear(LED_8);
           nrf_gpio_pin_clear(LED_1);
           nrf_gpio_pin_clear(LED_2);
       break;

       case 0x78:
            timeout=15;
            auto_val1=timeout;
           
            nrf_gpio_pin_set(LED_3);
            nrf_gpio_pin_clear(LED_6);
            nrf_gpio_pin_clear(LED_5);
       break;

       case 0x79:
            timeout=10;
            auto_val1=timeout;
           
          nrf_gpio_pin_clear(LED_3);
          nrf_gpio_pin_clear(LED_6);
          nrf_gpio_pin_set(LED_5);
       break;

       case 0x7A:
            timeout=5;
            auto_val1=timeout;
            
            nrf_gpio_pin_clear(LED_3);
            nrf_gpio_pin_set(LED_6);
            nrf_gpio_pin_clear(LED_5);
       break;


     default :
       break;
   }
}


/**@brief Function for initializing services that will be used by the application.
 */
static void services_init(void)
{
   ret_code_t     err_code;
   ble_lbs_init_t init;

   init.led_write_handler = led_write_handler;

   err_code = ble_lbs_init(&m_lbs, &init);
   APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling the Connection Parameters Module.
 *
 * @details This function will be called for all events in the Connection Parameters Module that
 *          are passed to the application.
 *
 * @note All this function does is to disconnect. This could have been done by simply
 *       setting the disconnect_on_fail config parameter, but instead we use the event
 *       handler mechanism to demonstrate its use.
 *
 * @param[in] p_evt  Event received from the Connection Parameters Module.
 */
static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
{
    ret_code_t err_code;

    if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
    {
        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
        APP_ERROR_CHECK(err_code);
    }
}


/**@brief Function for handling a Connection Parameters error.
 *
 * @param[in] nrf_error  Error code containing information about what went wrong.
 */
static void conn_params_error_handler(uint32_t nrf_error)
{
    APP_ERROR_HANDLER(nrf_error);
}


/**@brief Function for initializing the Connection Parameters module.
 */
static void conn_params_init(void)
{
    ret_code_t             err_code;
    ble_conn_params_init_t cp_init;

    memset(&cp_init, 0, sizeof(cp_init));

    cp_init.p_conn_params                  = NULL;
    cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
    cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
    cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
    cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
    cp_init.disconnect_on_fail             = false;
    cp_init.evt_handler                    = on_conn_params_evt;
    cp_init.error_handler                  = conn_params_error_handler;

    err_code = ble_conn_params_init(&cp_init);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for starting advertising.
 */
static void advertising_start(void)
{
    ret_code_t           err_code;
    ble_gap_adv_params_t adv_params;

    // Start advertising
    memset(&adv_params, 0, sizeof(adv_params));

    adv_params.type        = BLE_GAP_ADV_TYPE_ADV_IND;
    adv_params.p_peer_addr = NULL;
    adv_params.fp          = BLE_GAP_ADV_FP_ANY;
    adv_params.interval    = APP_ADV_INTERVAL;
    adv_params.timeout     = APP_ADV_TIMEOUT_IN_SECONDS;

    sd_ble_gap_tx_power_set(4);
     NRF_LOG_INFO("Advertising");

    err_code = sd_ble_gap_adv_start(&adv_params, APP_BLE_CONN_CFG_TAG);
    APP_ERROR_CHECK(err_code);
    
}


/**@brief Function for handling BLE events.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 * @param[in]   p_context   Unused.
 */
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
    ret_code_t err_code;

    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
            NRF_LOG_INFO("Connected");

            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;

            break;

        case BLE_GAP_EVT_DISCONNECTED:
            NRF_LOG_INFO("Disconnected");
            m_conn_handle = BLE_CONN_HANDLE_INVALID;
            advertising_init();
            advertising_start();
            break;

        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported
            err_code = sd_ble_gap_sec_params_reply(m_conn_handle,
                                                   BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP,
                                                   NULL,
                                                   NULL);
            APP_ERROR_CHECK(err_code);
            break;

#ifndef S140
        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
        } break;
#endif

        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            // No system attributes have been stored.
            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTC_EVT_TIMEOUT:
            // Disconnect on GATT Client timeout event.
            NRF_LOG_DEBUG("GATT Client Timeout.");
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_TIMEOUT:
            // Disconnect on GATT Server timeout event.
            NRF_LOG_DEBUG("GATT Server Timeout.");
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_EVT_USER_MEM_REQUEST:
            err_code = sd_ble_user_mem_reply(p_ble_evt->evt.gattc_evt.conn_handle, NULL);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
        {
            ble_gatts_evt_rw_authorize_request_t  req;
            ble_gatts_rw_authorize_reply_params_t auth_reply;

            req = p_ble_evt->evt.gatts_evt.params.authorize_request;

            if (req.type != BLE_GATTS_AUTHORIZE_TYPE_INVALID)
            {
                if ((req.request.write.op == BLE_GATTS_OP_PREP_WRITE_REQ)     ||
                    (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_NOW) ||
                    (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL))
                {
                    if (req.type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)
                    {
                        auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
                    }
                    else
                    {
                        auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_READ;
                    }
                    auth_reply.params.write.gatt_status = APP_FEATURE_NOT_SUPPORTED;
                    err_code = sd_ble_gatts_rw_authorize_reply(p_ble_evt->evt.gatts_evt.conn_handle,
                                                               &auth_reply);
                    APP_ERROR_CHECK(err_code);
                }
            }
        } break; // BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST

        default:
            // No implementation needed.
            break;
    }
}


/**@brief Function for initializing the BLE stack.
 *
 * @details Initializes the SoftDevice and the BLE event interrupt.
 */
static void ble_stack_init(void)
{
    ret_code_t err_code;

    err_code = nrf_sdh_enable_request();
    APP_ERROR_CHECK(err_code);

    // Configure the BLE stack using the default settings.
    // Fetch the start address of the application RAM.
    uint32_t ram_start = 0;
    err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);
    APP_ERROR_CHECK(err_code);

    // Enable BLE stack.
    err_code = nrf_sdh_ble_enable(&ram_start);
    APP_ERROR_CHECK(err_code);

    // Register a handler for BLE events.
    NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
}


/**@brief Function for handling events from the button handler module.
 *
 * @param[in] pin_no        The pin that the event applies to.
 * @param[in] button_action The button action (press/release).
 */
static void button_event_handler(uint8_t pin_no, uint8_t button_action)
{
    ret_code_t err_code;

    switch (pin_no)
    {
        case LEDBUTTON_BUTTON:
            NRF_LOG_INFO("Send button state change.");
            err_code = ble_lbs_on_button_change(m_conn_handle, &m_lbs, button_action);
            if (err_code != NRF_SUCCESS &&
                err_code != BLE_ERROR_INVALID_CONN_HANDLE &&
                err_code != NRF_ERROR_INVALID_STATE &&
                err_code != BLE_ERROR_GATTS_SYS_ATTR_MISSING)
            {
                APP_ERROR_CHECK(err_code);
            }
            break;

        default:
            APP_ERROR_HANDLER(pin_no);
            break;
    }
}


/**@brief Function for initializing the button handler module.
 */
static void buttons_init(void)
{
    ret_code_t err_code;

    //The array must be static because a pointer to it will be saved in the button handler module.
    static app_button_cfg_t buttons[] =
    {
        {LEDBUTTON_BUTTON, false, BUTTON_PULL, button_event_handler}
    };

    err_code = app_button_init(buttons, sizeof(buttons) / sizeof(buttons[0]),
                               BUTTON_DETECTION_DELAY);
    APP_ERROR_CHECK(err_code);
}


static void log_init(void)
{
    ret_code_t err_code = NRF_LOG_INIT(NULL);
    APP_ERROR_CHECK(err_code);

    NRF_LOG_DEFAULT_BACKENDS_INIT();
}


/**@brief Function for the Power Manager.
 */
static void power_manage(void)
{
    ret_code_t err_code = sd_app_evt_wait();
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling bsp events.
 */

void bsp_evt_handler(bsp_event_t evt)
{
      
      switch (evt)
      {
        case BSP_EVENT_KEY_0:     
            if(auto_val<15)
            {
            timeout=auto_val+5;
            auto_val=timeout;
            int t=auto_val;
          //  seven_seg(t);
            NRF_LOG_INFO("Timer increament function");

            
               if(auto_val==15){
                 nrf_gpio_pin_set(LED_3);
                 nrf_gpio_pin_clear(LED_6);
                 nrf_gpio_pin_clear(LED_5);
            }
            if(auto_val==10){
                 nrf_gpio_pin_clear(LED_3);
                 nrf_gpio_pin_set(LED_5);
                 nrf_gpio_pin_clear(LED_6);
            }
          if(auto_val==5)
          {
               nrf_gpio_pin_clear(LED_3);
               nrf_gpio_pin_clear(LED_5);
               nrf_gpio_pin_set(LED_6);
               
          }
            }
            break;

       case BSP_EVENT_KEY_1:
            //reset timer value
        if(auto_val>0){

          timeout = auto_val-5;
          auto_val=timeout;
          int t=auto_val;
          seven_seg(t);
           NRF_LOG_INFO("Timer decreament function");
            if(auto_val==15){
                 nrf_gpio_pin_set(LED_3);
                 nrf_gpio_pin_clear(LED_6);
                 nrf_gpio_pin_clear(LED_5);
            }
            if(auto_val==10){
                 nrf_gpio_pin_clear(LED_3);
                 nrf_gpio_pin_set(LED_5);
                 nrf_gpio_pin_clear(LED_6);
            }
          if(auto_val==5){
               nrf_gpio_pin_clear(LED_3);
               nrf_gpio_pin_clear(LED_5);
               nrf_gpio_pin_set(LED_6);
               
          }
          }
          break;

       case BSP_EVENT_KEY_2:  //On Button 4 press - Auto Button
       
            break;

         case BSP_EVENT_KEY_3:     
            if(auto_val2<40)
            {
            timeout2=auto_val2+10;
            auto_val2=timeout2;
            int t2=auto_val2;
          //  seven_seg2(t2);
            NRF_LOG_INFO("Timer increament function");
             if(auto_val2==40)
           {
                 nrf_gpio_pin_clear(LED_4);
                 nrf_gpio_pin_clear(LED_8);
                 nrf_gpio_pin_set(LED_1);
                 nrf_gpio_pin_clear(LED_2);
            }
            if(auto_val2==30)
            {
                 nrf_gpio_pin_clear(LED_4);
                 nrf_gpio_pin_clear(LED_8);
                 nrf_gpio_pin_clear(LED_1);
                  nrf_gpio_pin_set(LED_2);
            }
          if(auto_val2==20)
          {    nrf_gpio_pin_clear(LED_4);
               nrf_gpio_pin_set(LED_8);
               nrf_gpio_pin_clear(LED_1);
               nrf_gpio_pin_clear(LED_2);
               
          }
           if(auto_val2==10)
           {
               nrf_gpio_pin_set(LED_4);
               nrf_gpio_pin_clear(LED_8);
               nrf_gpio_pin_clear(LED_1);
               nrf_gpio_pin_clear(LED_2);
               
          }

            }
            break;

       case BSP_EVENT_KEY_4:
            //reset timer value
        if(auto_val2>0){
          timeout2 = auto_val2-10;
          auto_val2=timeout2;
          int t2=auto_val2;
        //  seven_seg2(t2);
           NRF_LOG_INFO("Timer decreament function");
           if(auto_val2==40)
           {
                 nrf_gpio_pin_clear(LED_4);
                 nrf_gpio_pin_clear(LED_8);
                 nrf_gpio_pin_set(LED_1);
                 nrf_gpio_pin_clear(LED_2);
            }
            if(auto_val2==30)
            {
                 nrf_gpio_pin_clear(LED_4);
                 nrf_gpio_pin_clear(LED_8);
                 nrf_gpio_pin_clear(LED_1);
                  nrf_gpio_pin_set(LED_2);
            }
          if(auto_val2==20)
          {    nrf_gpio_pin_clear(LED_4);
               nrf_gpio_pin_set(LED_8);
               nrf_gpio_pin_clear(LED_1);
               nrf_gpio_pin_clear(LED_2);
               
          }
           if(auto_val2==10)
           {
               nrf_gpio_pin_set(LED_4);
               nrf_gpio_pin_clear(LED_8);
               nrf_gpio_pin_clear(LED_1);
               nrf_gpio_pin_clear(LED_2);               
          }

          }
          break;

        

           default:
           return; // no implementation needed
        }

        uint32_t err_code = NRF_SUCCESS;
        APP_ERROR_CHECK(err_code);
    }


/**@brief Function for initializing low frequency clock.
 */
void clock_initialization()
{
    NRF_CLOCK->LFCLKSRC            = (CLOCK_LFCLKSRC_SRC_Xtal << CLOCK_LFCLKSRC_SRC_Pos);
    NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    NRF_CLOCK->TASKS_LFCLKSTART    = 1;

    while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0)
    {
        // Do nothing.
    }
}

/**@brief Function for initializing bsp module.
 */
void bsp_configuration()
{
    uint32_t err_code;

    err_code = bsp_init(BSP_INIT_LED | BSP_INIT_BUTTONS, bsp_evt_handler);
    APP_ERROR_CHECK(err_code);
}


  //========================================= Timer Handling code -optional ====================================================================

// Timeout handler for the repeated timer
static void timer_a_handler(void * p_context)
{  
  
  if(timeout==0)
  {
    app_timer_stop(m_led_a_timer_id);  
    timeout2=auto_val2;
    start_timer2(1000);
   
     NRF_LOG_INFO("Timer value: %d",timeout);
    // seven_seg(0);
  }
  else 
  {
      NRF_LOG_INFO("Timer value: %d",timeout);
      NRF_LOG_INFO("Auto value: %d",auto_val);
      int seg1=timeout;
     
     // seven_seg(seg1);
      timeout-=5;
  
  }

} 


// Timeout handler for the single shot timer
static void timer_b_handler(void * p_context)
{
      if(timeout2==0){  
        app_timer_stop(m_led_b_timer_id);
        
        timeout=auto_val1;
        start_timer1(5000);
    
        NRF_LOG_INFO("Timer2 value: %d",timeout2);
        uint32_t err_code;
        err_code=fds_gc();
      }
      else {
      
        start_timer2(1000);
        NRF_LOG_INFO("Timer2 value: %d",timeout2);
          timeout2-=1;
          uint32_t err_code;
        err_code=fds_gc();
      }
        //memory_write();
      //  NRF_LOG_INFO("memory write function!");

 }


// Create timers
static void create_timers()
{   
    uint32_t err_code;
    // Create timers
    err_code = app_timer_create(&m_led_a_timer_id,
                                APP_TIMER_MODE_REPEATED,
                                timer_a_handler);
    APP_ERROR_CHECK(err_code);
    
    
    err_code = app_timer_create(&m_led_b_timer_id,
                                APP_TIMER_MODE_SINGLE_SHOT,
                                timer_b_handler);
    APP_ERROR_CHECK(err_code);
} 

// Start timers
void start_timer1(int n)
{
    uint32_t err_code;
     err_code = app_timer_start(m_led_a_timer_id, APP_TIMER_TICKS(n), NULL);
        APP_ERROR_CHECK(err_code);
} 

// Start timers
void start_timer2(int n1)
{
    uint32_t err_code;
     err_code = app_timer_start(m_led_b_timer_id, APP_TIMER_TICKS(n1), NULL);
        APP_ERROR_CHECK(err_code);
} 


//======================================== optional code end =========================================


      /**@brief Function for application main entry.
 */


int main(void) {

        mdata[0] = 0x00;
        mdata[1] = 0x00;
        mdata[2] = 0x00;
        mdata[3] = 0x00;
        mdata[4] = 0x00;
        uint32_t ret_code_t;

        // Initialize.
        leds_init();
        timers_init();
        log_init();

        ble_stack_init();
        gap_params_init();
        gatt_init();
        services_init();
        advertising_init();
        conn_params_init();
        bsp_configuration();
        create_timers();
        // Start execution.

        nrf_gpio_pin_clear(LED_1);
        nrf_gpio_pin_clear(LED_2);
        nrf_gpio_pin_clear(LED_3);
        nrf_gpio_pin_clear(LED_4);
        nrf_gpio_pin_clear(LED_5);
        nrf_gpio_pin_clear(LED_6);
        nrf_gpio_pin_clear(LED_7);
        nrf_gpio_pin_clear(LED_8);
        nrf_gpio_pin_clear(LED_9);
        nrf_gpio_pin_clear(LED_10);
        
        
        ret_code_t = fds_register(fds_evt_handler);

        if (ret_code_t != FDS_SUCCESS)
        {
            NRF_LOG_INFO("Register Failed...");
        }

        ret_code_t = fds_init();
        if (ret_code_t != FDS_SUCCESS)
        {
            NRF_LOG_INFO("Init Failed Failed...");
        }
        
        //ret_code_t = fds_file_delete(0x0001);
        
        ret_code_t = fds_read();
        //ret_code_t = fds_file_delete(FILE_ID);

        
        NRF_LOG_INFO("BLUESKYLINKS NRF APP STARTED");

     

    //start timer
         NRF_LOG_INFO("Timer Started....");
           
            if(auto_val>0 ){
              
               timeout=auto_val1;
               //seven_seg(auto_val);      
               start_timer1(5000);

               if(auto_val==15)
               {               
                 nrf_gpio_pin_set(LED_3);
            }
            if(auto_val==10){
               
                 nrf_gpio_pin_set(LED_5);
            }
          if(auto_val==5){
               nrf_gpio_pin_set(LED_6);
               
          }
          }
          else{}
          if (auto_val2>0){

           if(auto_val2==40)
           {
                 
                 nrf_gpio_pin_set(LED_1);
                 
            }
            if(auto_val2==30)
            {
                 nrf_gpio_pin_set(LED_2);
            }
          if(auto_val2==20)
          {   
               nrf_gpio_pin_set(LED_8);
               
          }
           if(auto_val2==10)
           {
               nrf_gpio_pin_set(LED_4);
               
          }
          }
          else {}

        advertising_start();


        for (;;) {
          if (NRF_LOG_PROCESS() == false) {
            power_manage();
        }
    }
}
